sql에 대해서 설명해주세요. c언어와 같은 프로그래밍 언어와 어떤차이가 있나요?
	- sql 은 dbms에서 데이터를 구축하고 관리하는 구조화된 언어입니다. 쿼리를 작성하는데 사용되는 언어이며 이를 활용하여 데이터를 조작할 수 있습니다. 다른 프로그램 언어와 차이점은 sql은 오로지 데이터베이스에 목적을 두는 반면
	다른 프로그램 언어는 다양성에 목적을 두는것과 sql은 데이터베이스에 저장된 전체 data를 호출하는 반면 프로그래밍 언어는 배열에 저장된 data를 요청하기 위해서는 하나하나 호출하는 방식의 차이점이 있습니다.

개발자가 작성한 sql이 어떠한 과정을 통해 실행되는지 설명해주세요
	- 작성한 sql은 파싱이라는 과정을 거치는데 그 과정이 두가지로 나뉩니다. 먼저 쿼리가 저장되어 있는지 즉 사용한 기록이 있는 쿼리는 바로 옵티마이저가 만든 실행 계획으로 넘아갑니다. 하지만 기록이 없는 쿼리는 쿼리 파서에서 
	어휘, 문법, 권한 등을 체크하고 옵티마이저가 실행할 수 있게끔 파서 트리가 생성이 됩니다. 이렇게 두가지로 나뉘는데 옵티마이저 단계로 온 후부터는 동일합니다. 옵티마이저가 쿼리를 최적의 환경으로 쿼리 실행 엔진으로
	호출합니다. 그 후 스토리지 엔진에서 쿼리 실행 엔진이 요청하는 수순대로 데이터를 불러오는 과정으로 실행이 됩니다.
	
SQL 의 언어 종류
	- SQL의 언어는 크게 4가지로 나뉩니다 먼저 DDL은 명령하는 순간 작업이 바로 반영이 되는 CREATE, ALTER, DROP, RENAME, TRUNCATE가 있으며 주로 테이블을 작업하는 명령어가 속해있고
	- DML은 작업이 바로 반영이 되는게 아니라 지정이되는 테이블을 메모리버퍼 위에 올려두고 수행할 수 있기 때문에 작업을 이전 상태로 되돌릴수도 있습니다 이러한 과정을 트랜잭션이라고 하며 SELECT, INSERT, UPDATE, DELETE
	같이 데이터를 작업하는 명령어가 속해있습니다
	- DCL은 보안과 권한 관리 작업들이 속해있습니다 명령어는 GRANT 나 REVOKE 같이 권한 부여 및 취소하는 명령어가 속해있습니다.
	- 마지막으로 TCL은 트랜잭션 제어 언어이며 DML 명령어로 데이터를 변환시키는 작업을 트랜잭션 별로 제어할 수 있습니다 여기서 트랜잭션이란 저희가 입력하는 명령어 각각 하나를 트랜잭션이라고 하며 BEGIN TRAN, COMMIT, ROLLBACK 같은
	명령어가 속해있습니다.

참조 무결성이 무엇인가요?
	- 무결성이란 데이터베이스에서 저장된 데이터를 제한을 통하여 신뢰를 보장하고 일관성을 유지시켜주는 것을 무결성이라고 합니다. 이러한 무결성은 크게 3가지로 나뉩니다.
	- 영역 무결성은 데이터 하나하나, 열 또는 속성에 대한 규칙을 검사합니다. 대표적으로 NULL 검사나 속성 타입이 맞는지, 값의 범위가 맞는지 검사하는 작업 등이 있습니다.
	- 참조 무결성은 두 테이블 간의 관계를 다루는데 부모 테이블과 자식 테이블 간의 데이터 일관성을 보장하는 규칙입니다. 자식 테이블의 외래키는 부모 테이블의 기본키를 참조해야하며 부모 테이블에서 데이터가 삭제가 되면 그 부모 투플을
	참조하는 모든 자식 테이블의 투플 또 한 적절하게 처리가 되어야 합니다.
	- 개체 무결성은 기본 키의 일관성을 보장하는 규칙입니다. 중복된 값과 NULL값을 허용하지 않는 규칙이 있습니다.
	
CASECADE
	- CASECADE는 참조 무결성을 무시하면서 작업하는 명령어들을 말합니다. DELETE CASECADE, UPDATE CASECADE가 있으며 부모 테이블의 기본 키와 자식 테이블의 외래 키가 동시에 변경이 되는 작업들이며 데이터베이스
	를 사용하는 SQL 명령어중 하나입니다.
	
VIEW
	- 뷰는 데이터베이스에서 가상 테이블을 뜻하며 사용자가 특정 데이터를 쉽게 접근할 수 있도록 도와줍니다. 뷰를 사용함으로써 복잡한 쿼리를 단순화 시켜 작업을 할 수 있으며 보안 이나 권한 제어에도 좋은 장점이 있습니다.
	단점으로는 본래 있는 테이블의 데이터를 가지고 가상의 테이블을 만드는 것으로 데이터에 접근하여 수정 및 삭제 하는 작업은 진행할 수 없습니다.

SELECT 실행 순서
	- 쿼리문은 주로 SELECT 부터 시작하지만 정말로 실행이 되는 순서는 FROM 부터 실행이 됩니다. FROM - WHERE - GROUP BY - HAVING - SELECT - ORDER BY 순이며 차례대로 설명을 말하면
	FROM 절에서 쿼리문에서 조회하는 전체 테이블을 먼저 가져옵니다 그 후 WHERE 절에서 조건에 맞는 결과의 데이터들만 간추리고 GROUP BY 절에서 GROUPING 한 작업들이 실행이 됩니다 대표적인 작업으로는 MAX, MIN등이 있으며
	작업이 진행된 후에는 HAVING 절에서 GROUPING 해서 처리한 데이터들을 필터링을 합니다 그후에 SELECT 절로 사용자가 최종적으로 보고 싶어하는 데이터들을 가져오고 마지막 ORDER BY 절로 SELECT 문이 출력되는
	순서를 제어 할 수 있습니다.
	
SELECT FOR UPDATE
	- SELECT FOR UPDATE 는 SQL 문장 중 하나로 특정 투플을 잠금 상태로 만들어 다른 세션에서 작업을 할 수 없도록 하는데 사용합니다
	만약 내가 SELECT ID, NAME, FOOD FROM MASTER WHERE NAME JHON FOR UPDATE 라고 쿼리를 입력하면 다른 세션이나 권한이 없는 사용자들은 JHON에 대한 데이터에 접근할 수 없게됩니다. 하지만
	이렇게 SELECT FOR UPDATE를 오래 사용하면 메모리에 계속 올라가 있는 상태를 유지하기 때문에 성능저하를 초래할 수 있습니다. 해제하는 방법은 FOR UPDATE 또한 트랜잭션에 일부이므로 COMMIT, ROLLBACK 으로 해제할 수 있습니다.
	
INNER JOIN과 OUTER JOIN
	- INNER JOIN은 두테이블간의 공통된 투플만 반환하는 유형이고 OUTER JOIN은 일치하지 않는 행도 포함하여 결과를 반환하는 유형입니다.
	
LEFT OUTER JOIN, RIGHT OUTER JOIN
	- OUTER JOIN으로 두테이블의 일치하지 않는 투플을 반환하는데 여기서 JOIN 명령어를 기준으로 달라집니다 만약 JOIN 명령어를 기준으로 테이블이 왼쪽에 위치하면 왼쪽 테이블의 모든 투플을 포함하고 오른쪽 테이블과 일치하는 행을 다 가져옵니다
	반대로 RIGHT는 그반대라고 생각하시면 됩니다.
	
CROSS JOIN에 대해서도 설명해주세요.
	- CROSS JOIN은 두 개 이상의 테이블 간에 조합이 가능한 모든 N의 데이터를 다 반환하는 JOIN문 입니다. 만약 방대한 데이터가 있는 테이블들을 사용할 경우 결과 테이블이 매우 커질 수 있으므로 주의해야 합니다.
	
서브쿼리
	- 서브쿼리는 본 SQL 쿼리 내부에 포함된 또 다른 SQL 쿼리로 주로 다른 외부 테이블의 투플이나 조건을 가져오기위해 사용이됩니다. 서브쿼리는 위치에 따라 쓰임이나 특징이 크게 달라집니다 크게 SELECT절에 서브쿼리를 쓰는걸
	스칼라 라고 부르며 작업을 통해 돌출되는 투플이 무조건 하나여야 하는 특징이 있습니다. FROM 절에서 쓰는 서브쿼리는 인라인 뷰라고 하며 사용자가 정의한 테이블에 데이터를 가져올 수 도 있고 다른 테이블을 가져오거나 특정 데이터들을
	지정 할 수 있습니다. WHERE 절에서 사용되는 서브쿼리는 결과를 더욱더 엄격하게 필터링 할 수 있는 효과가 있으며 이러한 서브쿼리들은 상황에 맞게 사용하는것이 중요합니다.
	
DROP, TRUNCATE, DELETE
	- DROP은 테이블 자체를 지우는 방식이며 생성 되기전 으로 만듭니다 TCL로 제어할 수가 없습니다. 그러므로 작업을 진행하기전 신중해야 합니다. TRUNCATE는 그 테이블의 모든 데이터를 삭제하는 것으로 생성된 상태로 만듭니다
	TCL로 제어할 수 없습니다. 마지막으로 DELETE는 WHERE 절과 함께 사용할 수 있으며 더 정교하게 데이터에 접근할 수 있습니다. TCL로 제어가 가능하며 실수가 있어도 다시 되돌릴 수가 있습니다.
	
DISTINCT
	- DISTINCT는 데이터 중복을 제거하여 각 데이터들의 고유한 값만 반환 받을 수 있게 작업합니다. 사용자가 SELECT 문에서 사용하며 중복된 데이터들을 제거할 수 있으며 SELECT 문에서 사용하였다면 그 SELECT 절에 포함된 모든
	데이터가 영향을 받습니다
	저같은 경우는 join했을때 중복값 삭제 또는 스칼라에 활용하여 하나만 반환할수 있게끔 하거나 여러 type이 있는 테이블인데 데이터들이 많으면 select distinct type from master 와 같이 where 절에 사용하여 데이터를
	내가 원하는 데이터로 반환 받을수 있게끔 사용한 경험이 있습니다.
	
SQL Injection
	- SQL Injection 악의적인 공격자가 sql 삽입을 통해 쿼리를 조작하거나 주입하는 공격 기술입니다. 공격 방식은 주석삽입이나 유니온 특수기호사용이 있습니다 쉬워보이는 공격방식이지만 그 결과는 엄청나게 효과가 크니 항상
	조회하는 로직이나 프로시저 같은 쿼리들은 특수문자 체크 및 입력한 데이터 검증이나 지정된 파라미터만 결과값받기 등으로 예방할 수 있습니다.
	
sql 안티패턴
	- select * 사용, 광범위한 사용자 입력 직접 삽입, 대량 데이터 삭제 또는 업데이트, 너무 많은 인덱스, 비효울적인 조인, 무분별한 서브쿼리 등이 있습니다.
	
페이지네이션을 구현한다고 했을때 쿼리를 어떻게 작성해야할까요?
	- 페이지네이션을 구현한다고 하면 저같으면 일단 해당페이지 테이블에 페이지번호와 페이지 당 항목 수를 받는 파라미터를 만들것입니다 그후 limit와 offset 으로 페이지 당 항목수를 제어하고 offset으로 몇번째 페이지를 가져올 지 제어할것입니다.